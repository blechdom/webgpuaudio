"use strict";(self.webpackChunkwebgpuaudio=self.webpackChunkwebgpuaudio||[]).push([[96],{2776:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>f,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var t=r(5893),o=r(1151),i=r(7294);function a(){return new Worker(r.p+"assets/js/worker.e31167cd.worker.js")}const s="@group(0) @binding(0) var<uniform> modelView: mat4x4<f32>;\n@group(0) @binding(1) var<uniform> projection: mat4x4<f32>;\n@group(0) @binding(2) var<uniform> normal: mat4x4<f32>;\n    \nstruct VertexOutput {\n    @builtin(position) clip_position: vec4<f32>,\n    @location(0) normal: vec3<f32>\n};\n\n@vertex\nfn vs_main(\n    @location(0) inPos: vec3<f32>,\n    @location(1) inNormal: vec3<f32>\n) -> VertexOutput {\n    var out: VertexOutput;\n    out.clip_position = projection * modelView * vec4<f32>(inPos, 3.5);\n    out.normal = normalize(normal * vec4<f32>(inNormal, 0.0)).xyz;\n    return out;\n}\n    \n// Fragment shader\n@fragment\n    fn fs_main(in: VertexOutput,  @builtin(front_facing) face: bool) -> @location(0) vec4<f32> {\n        if (face) {\n            var normal:vec3<f32> = normalize(in.normal);\n            return vec4<f32>(normal ,1.0);\n        }\n        else {\n            return vec4<f32>(0.0, 1.0, 0.0 ,1.0);\n        }\n    }",c={title:"WebGPU WebWorker Example",sidebar_position:1},u=void 0,l={id:"webWorker/webGpuWorker",title:"WebGPU WebWorker Example",description:"useEffect(() => {",source:"@site/docs/webWorker/webGpuWorker.mdx",sourceDirName:"webWorker",slug:"/webWorker/webGpuWorker",permalink:"/docs/webWorker/webGpuWorker",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"WebGPU WebWorker Example",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Web Workers and ring buffers",permalink:"/docs/category/web-workers-and-ring-buffers"},next:{title:"WebAudio Oscillators",permalink:"/docs/webAudioOscillators"}},f={},d=[],p=function(){const e={canvas:"canvas",...(0,o.a)()},n=(0,i.useRef)(null);return(0,i.useEffect)((()=>{n.current&&async function(e){const n=new a;n.addEventListener("message",(e=>{e.data.type,console.error(`Unknown Message Type: ${e.data.type}`)}));try{const r=e.transferControlToOffscreen(),t=window.devicePixelRatio;r.width=e.clientWidth*t,r.height=e.clientHeight*t,n.postMessage({type:"run",offscreenCanvas:r,code:s},[r])}catch(r){console.warn(r.message),n.terminate()}}(n.current)}),[n]),(0,t.jsx)(e.canvas,{ref:n,width:500,height:500})};function b(e){return(0,t.jsx)(t.Fragment,{})}function m(e={}){return(0,t.jsx)(p,{...e,children:(0,t.jsx)(b,{...e})})}}}]);