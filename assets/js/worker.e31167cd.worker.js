(()=>{importScripts("/scripts/gl-matrix.js"),importScripts("/scripts/OBJFile.js"),importScripts("/scripts/utils.js"),self.addEventListener("message",(t=>{if("run"===t.data.type)try{!async function(t,r){let i=0;const a=await navigator.gpu.requestAdapter();let s=await a.requestDevice(),n=configContext(s,t),o=glMatrix.mat4.lookAt(glMatrix.mat4.create(),glMatrix.vec3.fromValues(5*Math.cos(i),5*Math.sin(i),5),glMatrix.vec3.fromValues(0,0,0),glMatrix.vec3.fromValues(0,0,1)),f=createGPUBuffer(s,o,GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST),u=glMatrix.mat4.invert(glMatrix.mat4.create(),o),l=glMatrix.mat4.transpose(glMatrix.mat4.create(),u),c=createGPUBuffer(s,l,GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST),d=glMatrix.mat4.perspective(glMatrix.mat4.create(),1.4,640/480,.1,1e3),p=createGPUBuffer(s,d,GPUBufferUsage.UNIFORM),m=new e;await m.setup(s,r,f,p,c);const g={size:[t.width,t.height,1],dimension:"2d",format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT};const h={view:s.createTexture(g).createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store",stencilClearValue:0,stencilLoadOp:"clear",stencilStoreOp:"store"};async function x(){i+=.005;let e=glMatrix.mat4.lookAt(glMatrix.mat4.create(),glMatrix.vec3.fromValues(5*Math.cos(i*i),5*Math.sin(i*i),5),glMatrix.vec3.fromValues(0,0,0),glMatrix.vec3.fromValues(0,0,1)),r=createGPUBuffer(s,e,GPUBufferUsage.COPY_SRC),a=glMatrix.mat4.invert(glMatrix.mat4.create(),e),o=glMatrix.mat4.transpose(glMatrix.mat4.create(),a),u=createGPUBuffer(s,o,GPUBufferUsage.COPY_SRC);const l={colorAttachments:[{view:n.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:h};commandEncoder=s.createCommandEncoder(),commandEncoder.copyBufferToBuffer(r,0,f,0,e.byteLength),commandEncoder.copyBufferToBuffer(u,0,c,0,o.byteLength),passEncoder=commandEncoder.beginRenderPass(l),passEncoder.setViewport(0,0,t.width,t.height,0,1),m.encode(passEncoder),passEncoder.end(),s.queue.submit([commandEncoder.finish()]),await s.queue.onSubmittedWorkDone(),r.destroy(),u.destroy(),requestAnimationFrame(x)}requestAnimationFrame(x)}(t.data.offscreenCanvas,t.data.code)}catch(r){self.postMessage({type:"log",message:`Error while initializing WebGPU in worker process: ${r.message}`})}}));class e{constructor(){this.pipeline=null,this.positionBuffer=null,this.normalBuffer=null,this.indexBuffer=null,this.uniformBindGroup=null,this.indexSize=null}async setup(e,t,r,i,a){const s={code:t};let n=e.createShaderModule(s),{positionBuffer:o,normalBuffer:f,indexBuffer:u,indexSize:l}=await loadObj(e,"/obj/knot.obj");this.positionBuffer=o,this.normalBuffer=f,this.indexBuffer=u,this.indexSize=l;let c=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{}},{binding:2,visibility:GPUShaderStage.VERTEX,buffer:{}}]});this.uniformBindGroup=e.createBindGroup({layout:c,entries:[{binding:0,resource:{buffer:r}},{binding:1,resource:{buffer:i}},{binding:2,resource:{buffer:a}}]});const d={attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},p={attributes:[{shaderLocation:1,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},m={bindGroupLayouts:[c]},g={layout:e.createPipelineLayout(m),vertex:{module:n,entryPoint:"vs_main",buffers:[d,p]},fragment:{module:n,entryPoint:"fs_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list",frontFace:"ccw",cullMode:"none"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"}};this.pipeline=e.createRenderPipeline(g)}encode(e){e.setPipeline(this.pipeline),e.setBindGroup(0,this.uniformBindGroup),e.setVertexBuffer(0,this.positionBuffer),e.setVertexBuffer(1,this.normalBuffer),e.setIndexBuffer(this.indexBuffer,"uint16"),e.drawIndexed(this.indexSize)}}})();