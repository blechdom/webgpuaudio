(()=>{"use strict";__webpack_require__.gca=function(t){return t={}[t]||t,__webpack_require__.p+__webpack_require__.u(t)};class t{States={READ:0,WRITE:1};constructor(t,e){void 0===e&&(e=1),this.states=new Uint32Array(new SharedArrayBuffer(Object.keys(this.States).length*Uint32Array.BYTES_PER_ELEMENT)),this.bufferLength=t+1,this.channelCount=e,this.channelData=[];for(let a=0;a<e;a++)this.channelData.push(new Float32Array(new SharedArrayBuffer(this.bufferLength*Float32Array.BYTES_PER_ELEMENT)))}static fromPointers(e){const a=new t(0,0),s=new Uint32Array(e.memory.buffer),r=new Float32Array(e.memory.buffer),i=s[e.bufferLengthPointer/4],n=s[e.channelCountPointer/4],h=s.subarray(s[e.statePointer/4]/4,s[e.statePointer/4]/4+2),l=[];for(let t=0;t<n;t++)l.push(r.subarray(s[s[e.channelDataPointer/4]/4+t]/4,s[s[e.channelDataPointer/4]/4+t]/4+i));return a.bufferLength=i,a.channelCount=n,a.states=h,a.channelData=l,a}push(t,e){const a=Atomics.load(this.states,this.States.READ),s=Atomics.load(this.states,this.States.WRITE);if(this._getAvailableWrite(a,s)<e)return!1;let r=s+e;if(this.bufferLength<r){r-=this.bufferLength;for(let e=0;e<this.channelCount;e++){const a=this.channelData[e].subarray(s),i=this.channelData[e].subarray(0,r);a.set(t[e].subarray(0,a.length)),i.set(t[e].subarray(a.length))}}else{for(let a=0;a<this.channelCount;a++)this.channelData[a].subarray(s,r).set(t[a].subarray(0,e));r===this.bufferLength&&(r=0)}return Atomics.store(this.states,this.States.WRITE,r),!0}pull(t,e){const a=Atomics.load(this.states,this.States.READ),s=Atomics.load(this.states,this.States.WRITE);if(this._getAvailableRead(a,s)<e)return!1;let r=a+e;if(this.bufferLength<r){r-=this.bufferLength;for(let e=0;e<this.channelCount;e++){const s=this.channelData[e].subarray(a),i=this.channelData[e].subarray(0,r);t[e].set(s),t[e].set(i,s.length)}}else{for(let e=0;e<this.channelCount;++e)t[e].set(this.channelData[e].subarray(a,r));r===this.bufferLength&&(r=0)}return Atomics.store(this.states,this.States.READ,r),!0}printAvailableReadAndWrite(){const t=Atomics.load(this.states,this.States.READ),e=Atomics.load(this.states,this.States.WRITE);console.log(this,{availableRead:this._getAvailableRead(t,e),availableWrite:this._getAvailableWrite(t,e)})}getAvailableSamples(){const t=Atomics.load(this.states,this.States.READ),e=Atomics.load(this.states,this.States.WRITE);return this._getAvailableRead(t,e)}isFrameAvailable(t){return this.getAvailableSamples()>=t}getBufferLength(){return this.bufferLength-1}_getAvailableWrite(t,e){return e>=t?this.bufferLength-e+t-1:t-e-1}_getAvailableRead(t,e){return e>=t?e-t:e+this.bufferLength-t}_reset(){for(let t=0;t<this.channelCount;t++)this.channelData[t].fill(0);Atomics.store(this.states,this.States.READ,0),Atomics.store(this.states,this.States.WRITE,0)}}const e=t;self.addEventListener("message",(async t=>{if("init"===t.data.type){let{inputQueue:a,outputQueue:s,atomicState:r}=t.data.data;Object.setPrototypeOf(a,e.prototype),Object.setPrototypeOf(s,e.prototype);const i=new Float32Array(512);for(;"ok"===Atomics.wait(r,0,0);){if(a.pull([i],512)){const t=i.map((t=>.1*t));s.push([t],512)}Atomics.store(r,0,0)}}}))})();